/**
 * Goal of this module: Take all modified libraries, and ship them as a AAR.
 * We cannot ship as a JAR, because snappy-java has shared objects (.so) files,
 * and those are not shipped over correctly in Android projects depending on the JAR.
 * For silly reasons, it works fine if we present the same projects an AAR.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'com.kezong.fat-aar'
}

group our_group
version our_version

android {
    compileSdk 32

    defaultConfig {
        minSdk 29
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a', 'android-arm'
        }
    }

    buildTypes {
        release {
            minifyEnabled false // very important, otherwise all source code is removed (obviously)
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility android_java_version_src
        targetCompatibility android_java_version_target
    }

    lint {
        disable 'Instantiatable'
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

configurations {
//    implementation.extendsFrom embed
//    testImplementation.extendsFrom embed
}

dependencies {
    embed project(path: ':parquet-android:parquet-floor-android-decoy')
    embed("org.xerial.snappy:snappy-java:1.1.8.5")

    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    // We need to depend on these things in parquet
    implementation "org.apache.parquet:parquet-common:$parquet_version"
    implementation "org.apache.parquet:parquet-encoding:$parquet_version"
    implementation "org.apache.parquet:parquet-format-structures:$parquet_version"
    implementation "org.apache.parquet:parquet-jackson:$parquet_version"
    implementation "org.apache.yetus:audience-annotations:0.13.0"
    implementation "org.slf4j:slf4j-api:1.7.22"
}

fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed. (local aar module does not support)
     * If transitive is false, just embed first level dependency
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}

//test {
//    useJUnitPlatform()
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
//}

//java {
//    withJavadocJar()
//    withSourcesJar()
//}

//javadoc {
//    failOnError false
//
//    source configurations.doc.collect { zipTree(it) }
//    include '**/*.java'
//    include '**/*.scala'
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}

//jar {}

//shadowJar {
//    archiveClassifier.set('')
//}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ['--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED']
}
afterEvaluate {
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/Sebastiaan-Alvarez-Rodriguez/parquet-android")
                credentials {
                    username = addPropertyOrEnv("gpr.user", "USERNAME")
                    password = addPropertyOrEnv("gpr.token", "TOKEN")
                }
            }
        }
        publications {
            release(MavenPublication) { publication ->
                from components.release
//                https://stackoverflow.com/questions/26874498
                //            project.shadow.component(publication)
                //            artifacts = [ shadowJar, sourcesJar, javadocJar]

                groupId group
                artifactId "parquet-android"
                version version

                pom {
                    name = "parquet-android"
                    description = "Read and write parquet files on Android with ease."
                    url = "https://github.com/Sebastiaan-Alvarez-Rodriguez/parquet-android"

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/Sebastiaan-Alvarez-Rodriguez/parquet-android/blob/master/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'sebastiaan-alvarez-rodriguez'
                            name = 'Sebastiaan Alvarez Rodriguez'
                            email = ''
                        }
                    }
                }

                pom.withXml {
                    var pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.groupId.text().contains(rootProject.name)
                    }.each() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
}

def addPropertyOrEnv(String propertyKey, String envKey) {
    File propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.isFile()) {
        Properties properties = new Properties()
        properties.load(propertiesFile.newDataInputStream())
        return addPropertyOrEnv(properties, propertyKey, envKey)
    }
    return null
}

static def addPropertyOrEnv(Properties properties, String propertyKey, String envKey) {
    return properties.getProperty(propertyKey) ?: System.getenv(envKey)
}
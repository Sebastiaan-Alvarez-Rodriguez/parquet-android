/**
 * Goal of this module: Take all modified libraries, and ship them as a AAR.
 * We cannot ship as a JAR, because snappy-android has shared objects (.so) files,
 * and those must be shipped over using AARs.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'com.kezong.fat-aar'
}

group our_group
version our_version

android {
    compileSdk 32

    defaultConfig {
        minSdk 29
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false // very important, otherwise all source code is removed (obviously)
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility android_java_version_src
        targetCompatibility android_java_version_target
    }

    lint {
        disable 'Instantiatable'
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    embed project(path: ':parquet-android:parquet-floor-android-decoy')
    embed("com.github.Sebastiaan-Alvarez-Rodriguez:snappy-android:1.1.9")

    // We need to depend on these things in parquet
    implementation "org.apache.parquet:parquet-common:$parquet_version"
    implementation "org.apache.parquet:parquet-encoding:$parquet_version"
    implementation "org.apache.parquet:parquet-format-structures:$parquet_version"
    implementation "org.apache.parquet:parquet-jackson:$parquet_version"
    implementation "org.apache.yetus:audience-annotations:$parquet_yetus_version"
    implementation "org.slf4j:slf4j-api:$parquet_slf4j_version"

    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed. (local aar module does not support)
     * If transitive is false, just embed first level dependency
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ['--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED']
}
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) { publication ->
                from components.release

                groupId group
                artifactId "parquet-android"
                version version

                pom {
                    name = "parquet-android"
                    description = "Read and write parquet files on Android with ease."
                    url = "https://github.com/Sebastiaan-Alvarez-Rodriguez/parquet-android"

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/Sebastiaan-Alvarez-Rodriguez/parquet-android/blob/master/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id = 'sebastiaan-alvarez-rodriguez'
                            name = 'Sebastiaan Alvarez Rodriguez'
                            email = ''
                        }
                    }
                }

                pom.withXml {
                    var pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.groupId.text().contains(rootProject.name)
                    }.each() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
}